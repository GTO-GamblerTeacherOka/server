// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using VIRCE_server.DataBase;

namespace VIRCE_server.MasterMemoryDataBase.Tables
{
   public sealed partial class RoomServerInfoTable : TableBase<RoomServerInfo>, ITableUniqueValidate
   {
        public Func<RoomServerInfo, ushort> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<RoomServerInfo, ushort> primaryIndexSelector;

        readonly RoomServerInfo[] secondaryIndex0;
        readonly Func<RoomServerInfo, int> secondaryIndex0Selector;

        public RoomServerInfoTable(RoomServerInfo[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.RoomId;
            this.secondaryIndex0Selector = x => x.Port;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<RoomServerInfo> SortByPort => new RangeView<RoomServerInfo>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public RoomServerInfo FindByRoomId(ushort key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<ushort>.Default, key, false);
        }
        
        public bool TryFindByRoomId(ushort key, out RoomServerInfo result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<ushort>.Default, key, out result);
        }

        public RoomServerInfo FindClosestByRoomId(ushort key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<ushort>.Default, key, selectLower);
        }

        public RangeView<RoomServerInfo> FindRangeByRoomId(ushort min, ushort max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<ushort>.Default, min, max, ascendant);
        }

        public RoomServerInfo FindByPort(int key)
        {
            return FindUniqueCoreInt(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, false);
        }
        
        public bool TryFindByPort(int key, out RoomServerInfo result)
        {
            return TryFindUniqueCoreInt(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, out result);
        }

        public RoomServerInfo FindClosestByPort(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<RoomServerInfo> FindRangeByPort(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "RoomId", resultSet);       
            ValidateUniqueCore(secondaryIndex0, secondaryIndex0Selector, "Port", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(RoomServerInfo), typeof(RoomServerInfoTable), "RoomServerInfo",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(RoomServerInfo).GetProperty("RoomId")),
                    new MasterMemory.Meta.MetaProperty(typeof(RoomServerInfo).GetProperty("Port")),
                    new MasterMemory.Meta.MetaProperty(typeof(RoomServerInfo).GetProperty("Type")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RoomServerInfo).GetProperty("RoomId"),
                    }, true, true, System.Collections.Generic.Comparer<ushort>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RoomServerInfo).GetProperty("Port"),
                    }, false, true, System.Collections.Generic.Comparer<int>.Default),
                });
        }

#endif
    }
}